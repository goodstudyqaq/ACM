/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
   public:
    int minimumOperations(TreeNode *root) {
        vector<vector<int>> V;

        function<void(TreeNode *, int d)> dfs = [&](TreeNode *now, int d) {
            if (V.size() == d) {
                V.push_back(vector<int>{});
            }
            V[d].push_back(now->val);
            if (now->left != NULL) {
                dfs(now->left, d + 1);
            }
            if (now->right != NULL) {
                dfs(now->right, d + 1);
            }
        };
        dfs(root, 0);

        auto work = [&](vector<int> &v) -> int {
            int n = v.size();
            map<int, int> M;
            for (int i = 0; i < n; i++) {
                M[v[i]] = i;
            }
            debug(v);
            vector<int> v2 = v;
            sort(v2.begin(), v2.end());
            int res = 0;
            debug(M);
            for (int i = 0; i < n; i++) {
                int val = v2[i];
                if (v[i] == val) continue;
                int loc = M[val];
                res++;
                swap(M[val], M[v[i]]);
                swap(v[i], v[loc]);
            }
            return res;
        };

        int res = 0;
        int sz = V.size();
        for (int i = 0; i < sz; i++) {
            res += work(V[i]);
            debug(res);
        }
        return res;
    }
};