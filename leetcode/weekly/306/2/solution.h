/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

class Solution {
   public:
    string smallestNumber(string p) {
        int n = p.size();

        string ans = "";
        vector<bool> vis(10);

        auto check = [&](string &s) {
            for (int i = 0; i < n; i++) {
                char it = p[i];
                if (it == 'I') {
                    if (s[i + 1] < s[i]) return false;
                } else {
                    if (s[i + 1] > s[i]) return false;
                }
            }
            return true;
        };

        function<void(string, int)> dfs = [&](string res, int now) {
            if (now == n + 1) {
                if (check(res)) {
                    if (ans == "")
                        ans = res;
                    else
                        ans = min(ans, res);
                    return;
                }
            }
            if (now == 0) {
                for (int i = 1; i <= 9; i++) {
                    if (vis[i] == 0) {
                        vis[i] = 1;
                        char it = '0' + i;
                        dfs(res + it, now + 1);
                        vis[i] = 0;
                    }
                }
            } else {
                char the_p = p[now - 1];
                int last_val = res[now - 1] - '0';
                if (the_p == 'I') {
                    for (int i = last_val + 1; i <= 9; i++) {
                        if (vis[i] == 0) {
                            vis[i] = 1;
                            char it = '0' + i;
                            dfs(res + it, now + 1);
                            vis[i] = 0;
                        }
                    }
                } else {
                    for (int i = 1; i <= last_val - 1; i++) {
                        if (vis[i] == 0) {
                            vis[i] = 1;
                            char it = '0' + i;
                            dfs(res + it, now + 1);
                            vis[i] = 0;
                        }
                    }
                }
            }
        };

        dfs("", 0);
        return ans;
    }
};