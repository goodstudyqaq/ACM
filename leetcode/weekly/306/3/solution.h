/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

class Solution {
   public:
    int countSpecialNumbers(int n) {
        vector<int> num;
        while (n) {
            num.push_back(n % 10);
            n /= 10;
        }
        reverse(num.begin(), num.end());
        n = num.size();

        function<int(int val, int d, bool limit)> dfs = [&](int val, int d, bool limit) -> int {
            // debug(val, d, limit);
            if (d == n) {
                if (val == 0) return 0;
                return 1;
            }
            int tmp_val = val;
            unordered_set<int> S;
            while (tmp_val) {
                S.insert(tmp_val % 10);
                tmp_val /= 10;
            }

            if (!limit) {
                if (val == 0) {
                    int have = 9;
                    int need = n - d - 1;
                    int res = 9;
                    for (int i = 0; i < need; i++) {
                        res *= (have - i);
                    }
                    return res + dfs(0, d + 1, false);

                } else {
                    int have = 10 - S.size();
                    int need = n - d;
                    int res = 1;
                    for (int i = 0; i < need; i++) {
                        res *= (have - i);
                    }
                    return res;
                }
            }

            int LIMIT = num[d];
            int res = 0;
            for (int i = 0; i <= LIMIT; i++) {
                if (S.count(i)) continue;
                res += dfs(val * 10 + i, d + 1, i == LIMIT);
            }
            return res;
        };

        int res = dfs(0, 0, true);
        return res;
    }
};