/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

class Solution {
   public:
    long long maximumBeauty(vector<int>& f, long long newFlowers, int target, int full, int partial) {
        debug(f, newFlowers, target, full, partial);
        int n = f.size();
        long long big = 0;
        vector<int> v;

        long long need = 0;

        for (int i = 0; i < n; i++) {
            if (f[i] >= target) {
                big++;
            } else {
                need += target - f[i];
                v.push_back(f[i]);
            }
        }

        sort(v.begin(), v.end());
        int m = v.size();

        long long ans = big * full;
        if (v.size() == 0) {
            return ans;
        }
        if (need <= newFlowers) {
            ans = 1LL * n * full;
        }
        long long mi = v[0];

        long long sum = 0;
        int now_idx = 0;

        int r_idx = m - 1;
        long long now_ct = 0;
        while (r_idx >= 0 && now_ct + target - v[r_idx] <= newFlowers) {
            now_ct += target - v[r_idx];
            r_idx--;
        }
        debug(ans, r_idx);
        for (int i = mi; i < target; i++) {
            while (now_idx < m && v[now_idx] < i) {
                sum += v[now_idx];
                now_idx++;
            }
            long long ct = 1LL * now_idx * i - sum;
            if (ct > newFlowers) {
                break;
            }
            long long tmp = newFlowers - ct;
            while (r_idx < now_idx - 1) {
                r_idx++;
                now_ct -= target - v[r_idx];
            }
            while (now_ct > tmp) {
                r_idx++;
                now_ct -= target - v[r_idx];
            }

            int add_num = m - 1 - r_idx;

            long long tmp1 = newFlowers - (now_ct + ct);

            int num = min(tmp1 / (target - i), 1LL * now_idx - 1);

            long long res = 1LL * (big + add_num + num) * full + 1LL * i * partial;
            debug(i, ct, tmp, r_idx, res, now_idx, add_num);
            ans = max(ans, res);
        }

        return ans;
    }
};