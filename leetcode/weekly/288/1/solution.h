/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

class Solution {
   public:
    string minimizeResult(string s) {
        int n = s.size();
        int add;
        for (int i = 0; i < n; i++) {
            if (s[i] == '+') {
                add = i;
                break;
            }
        }

        long long res = 1e18;

        pair<int, int> ans;

        auto get_num = [&](int l, int r) {
            if (l > r) return 1;
            int res = 0;
            for (int i = l; i <= r; i++) {
                res = res * 10 + (s[i] - '0');
            }
            return res;
        };

        auto work = [&](int idx1, int idx2) {
            long long a = get_num(0, idx1 - 1);
            long long b = get_num(idx1, add - 1);
            long long c = get_num(add + 1, idx2);
            long long d = get_num(idx2 + 1, n - 1);
            return a * (b + c) * d;
        };

        for (int i = 0; i < add; i++) {
            for (int j = add + 1; j < n; j++) {
                long long tmp = work(i, j);
                if (res > tmp) {
                    res = tmp;
                    ans = {i, j};
                }
            }
        }

        string res_s = "";

        for (int i = 0; i < ans.first; i++) {
            res_s += s[i];
        }
        res_s += '(';
        for (int i = ans.first; i <= ans.second; i++) {
            res_s += s[i];
        }
        res_s += ')';
        for (int i = ans.second + 1; i < n; i++) {
            res_s += s[i];
        }
        return res_s;
    }
};