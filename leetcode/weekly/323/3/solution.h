/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

typedef pair<int, int> pii;
typedef pair<int, pii> piii;
class Solution {
   public:
    vector<int> maxPoints(vector<vector<int>>& grid, vector<int>& queries) {
        int n = grid.size();
        int m = grid[0].size();
        int q = queries.size();
        vector<pii> V(q);
        for (int i = 0; i < q; i++) {
            V[i] = {queries[i], i};
        }
        sort(V.begin(), V.end());

        vector<int> ans(q);
        priority_queue<piii, vector<piii>, greater<piii>> Q;
        Q.push({grid[0][0], {0, 0}});
        grid[0][0] = -1;
        int res = 0;
        int d[4][2] = {-1, 0, 1, 0, 0, -1, 0, 1};
        for (int i = 0; i < q; i++) {
            int limit = V[i].first;
            // debug(i);
            while (!Q.empty()) {
                auto it = Q.top();
                // debug(it);
                int val = it.first;
                auto [x, y] = it.second;
                if (val >= limit) break;
                debug("zzz", it);
                Q.pop();
                res++;
                for (int i = 0; i < 4; i++) {
                    int x2 = x + d[i][0], y2 = y + d[i][1];
                    if (x2 >= 0 && x2 < n && y2 >= 0 && y2 < m && grid[x2][y2] != -1) {
                        Q.push({grid[x2][y2], {x2, y2}});
                        grid[x2][y2] = -1;
                    }
                }
            }
            ans[V[i].second] = res;
        }
        return ans;
    }
};