/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

class Solution {
   public:
    vector<vector<int>> buildMatrix(int k, vector<vector<int>>& row, vector<vector<int>>& col) {
        vector ans = vector(k, vector(k, 0));
        vector<vector<int>> res(k + 1, vector<int>(2, 0));

        auto work = [&](vector<vector<int>>& r, int f) -> bool {
            int n = r.size();
            vector<vector<int>> V(k + 1);
            vector<int> in(k + 1);
            for (int i = 0; i < n; i++) {
                int u = r[i][0], v = r[i][1];
                V[u].push_back(v);
                in[v]++;
            }

            queue<int> Q;
            for (int i = 1; i <= k; i++) {
                if (in[i] == 0) {
                    Q.push(i);
                }
            }

            int num = 0;
            while (!Q.empty()) {
                int u = Q.front();

                Q.pop();
                res[u][f] = num;
                num++;
                for (auto v : V[u]) {
                    in[v]--;
                    if (in[v] == 0) {
                        Q.push(v);
                    }
                }
            }
            if (num != k) return false;
            return true;
        };

        bool f = work(row, 0);
        bool f2 = work(col, 1);
        if (!f || !f2) return vector<vector<int>>{};

        for (int i = 1; i <= k; i++) {
            int x = res[i][0], y = res[i][1];
            ans[x][y] = i;
        }

        return ans;
    }
};