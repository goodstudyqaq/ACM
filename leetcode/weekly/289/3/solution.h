/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

class Solution {
   public:
    vector<vector<int>> V;
    vector<int> dp;
    string s;
    int ans;

    void dfs(int u) {
        dp[u] = 1;
        for (auto v : V[u]) {
            dfs(v);
            if (s[v] != s[u]) {
                dp[u] = max(dp[u], dp[v] + 1);
            }
        }
    }

    void dfs2(int u) {
        ans = max(ans, dp[u]);
        vector<int> v2;
        for (auto v : V[u]) {
            dfs2(v);
            if (s[v] != s[u]) {
                v2.push_back(dp[v]);
            }
        }
        sort(v2.begin(), v2.end());
        if (v2.size() >= 2) {
            int sz = v2.size();
            ans = max(ans, dp[v2[sz - 1]] + dp[v2[sz - 2]] + 1);
        }
    }

    int longestPath(vector<int>& parent, string _s) {
        s = _s;
        int n = parent.size();
        dp.resize(n);
        V.resize(n);
        for (int i = 0; i < n; i++) {
            V[i].clear();
        }
        for (int i = 1; i < n; i++) {
            int p = parent[i];
            V[p].push_back(i);
        }
        dfs(0);
        ans = 0;
        dfs2(0);

        return ans;
    }
};