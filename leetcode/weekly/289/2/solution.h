/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

class Solution {
   public:
    vector<vector<vector<int>>> sum, sum2, sum3;
    int maxTrailingZeros(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        sum.resize(2, vector<vector<int>>(n + 1, vector<int>(m + 1)));
        sum2.resize(2, vector<vector<int>>(n + 1, vector<int>(m + 1)));
        sum3.resize(2, vector<vector<int>>(n + 1, vector<int>(m + 1)));

        for (int k = 0; k < 2; k++) {
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= m; j++) {
                    sum[k][i][j] = sum2[k][i][j] = sum3[k][i][j] = 0;
                }
            }
        }

        int a[2] = {2, 5};

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                for (int k = 0; k < 2; k++) {
                    int val = grid[i - 1][j - 1];
                    int m = a[k];
                    int num = 0;
                    while (val % m == 0) {
                        num++;
                        val /= m;
                    }
                    sum[k][i][j] = num;
                    sum2[k][i][j] = num;
                    sum3[k][i][j] = num;
                }
            }
        }

        for (int k = 0; k < 2; k++) {
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= m; j++) {
                    sum2[k][i][j] += sum2[k][i - 1][j];
                    sum3[k][i][j] += sum3[k][i][j - 1];
                }
            }
        }

        int res = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                int all1_0 = sum2[0][n][j];
                int all1_1 = sum2[1][n][j];
                int all2_0 = sum3[0][i][m];
                int all2_1 = sum3[1][i][m];

                int tmp1 = sum2[0][i][j], tmp2 = sum2[1][i][j];
                int tmp3 = sum3[0][i][j], tmp4 = sum3[1][i][j];

                res = max(res, min(tmp1 + tmp3 - sum[0][i][j], tmp2 + tmp4 - sum[1][i][j]));
                tmp3 = all2_0 - tmp3 + sum[0][i][j];
                tmp4 = all2_1 - tmp4 + sum[1][i][j];
                res = max(res, min(tmp1 + tmp3 - sum[0][i][j], tmp2 + tmp4 - sum[1][i][j]));
                tmp1 = all1_0 - tmp1 + sum[0][i][j];
                tmp2 = all1_1 - tmp2 + sum[1][i][j];
                res = max(res, min(tmp1 + tmp3 - sum[0][i][j], tmp2 + tmp4 - sum[1][i][j]));
                tmp3 = all2_0 - tmp3 + sum[0][i][j];
                tmp4 = all2_1 - tmp4 + sum[1][i][j];
                res = max(res, min(tmp1 + tmp3 - sum[0][i][j], tmp2 + tmp4 - sum[1][i][j]));
            }
        }
        return res;
    }
};