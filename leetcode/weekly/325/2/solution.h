/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

class Solution {
   public:
    int maximumTastiness(vector<int>& price, int k) {
        sort(price.begin(), price.end());
        price.resize(unique(price.begin(), price.end()) - price.begin());
        int n = price.size();
        if (n == 1) return 0;

        int l = 0, r = price[n - 1] - price[0];

        int ans = 0;
        k--;

        auto check = [&](int val) {
            int t = 0;
            int now_idx = 0;
            while (t < k) {
                int tmp = price[now_idx] + val;
                auto it = lower_bound(price.begin(), price.end(), tmp) - price.begin();
                if (it == n) return false;
                t++;
                now_idx = it;
            }
            return true;
        };

        while (l <= r) {
            int m = l + r >> 1;
            if (check(m)) {
                ans = m;
                l = m + 1;
            } else {
                r = m - 1;
            }
        }
        return ans;
    }
};