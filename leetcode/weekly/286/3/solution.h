/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

class Solution {
   public:
    vector<vector<int>> dp;
    vector<vector<int>> sum;
    vector<int> sz_sum;
    int maxValueOfCoins(vector<vector<int>>& piles, int k) {
        int n = piles.size();
        dp.resize(n + 1);
        sum.resize(n + 1);
        sz_sum.resize(n + 1);

        for (int i = 0; i <= n; i++) {
            dp[i].resize(k + 1);
            for (int j = 0; j <= k; j++) {
                dp[i][j] = 0;
            }
        }

        for (int i = 0; i < n; i++) {
            sum[i].resize(piles[i].size());
            int now = 0;
            for (int j = 0; j < piles[i].size(); j++) {
                now += piles[i][j];
                sum[i][j] = now;
            }
            sz_sum[i] = piles[i].size();
            if (i != 0) {
                sz_sum[i] += sz_sum[i - 1];
            }
        }
        for (int i = 0; i < n; i++) {
            for (int j = 1; j <= k && j <= sz_sum[i]; j++) {
                if (i == 0) {
                    dp[i][j] = sum[i][j - 1];
                } else {
                    dp[i][j] = dp[i - 1][j];
                    for (int t = 1; t <= piles[i].size() && t <= j; t++) {
                        dp[i][j] = max(dp[i][j], dp[i - 1][j - t] + sum[i][t - 1]);
                    }
                }
            }
        }
        return dp[n - 1][k];
    }
};