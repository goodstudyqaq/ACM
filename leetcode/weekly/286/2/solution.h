/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

class Solution {
   public:
    vector<long long> ten;
    long long cal(int len) {
        int tmp = (len - 1) / 2;
        long long res = 9;
        for (int i = 0; i < tmp; i++) {
            res *= 10;
        }
        return res;
    }

    long long work(int num, int len) {
        long long res = 0;

        int cnt = (len - 1) / 2 + 1;
        vector<int> the_num;
        for (int i = 0; i < cnt; i++) {
            int limit = 0;
            if (i == 0) {
                limit = 1;
            }
            long long have = ten[cnt - i - 1];
            for (int j = limit; j <= 9; j++) {
                if (have < num) {
                    num -= have;
                } else {
                    the_num.push_back(j);
                    break;
                }
            }
        }

        int ed = the_num.size() - 1;
        if (len % 2) {
            ed--;
        }
        while (ed >= 0) {
            the_num.push_back(the_num[ed]);
            ed--;
        }
        res = 0;
        for (int i = 0; i < len; i++) {
            res = res * 10 + the_num[i];
        }
        return res;
    }

    vector<long long> kthPalindrome(vector<int>& queries, int intLength) {
        int q = queries.size();
        long long mx_num = cal(intLength);

        ten.resize(intLength + 1);
        ten[0] = 1;
        for (int i = 1; i <= intLength; i++) {
            ten[i] = ten[i - 1] * 10;
        }

        vector<long long> ans;
        for (int i = 0; i < q; i++) {
            if (queries[i] > mx_num) {
                ans.push_back(-1);
            } else {
                ans.push_back(work(queries[i], intLength));
            }
        }
        return ans;
    }
};