/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

class Solution {
   public:
    vector<string> split(string s, string delimiter) {
        size_t pos_start = 0, pos_end, delim_len = delimiter.length();
        string token;
        vector<string> res;

        while ((pos_end = s.find(delimiter, pos_start)) != string::npos) {
            token = s.substr(pos_start, pos_end - pos_start);
            pos_start = pos_end + delim_len;
            res.push_back(token);
        }

        res.push_back(s.substr(pos_start));
        return res;
    }

    /*
    %02d 2位数字，不满补 0
    */
    template <typename... Args>
    std::string string_format(const std::string& format, Args... args) {
        int size_s = std::snprintf(nullptr, 0, format.c_str(), args...) + 1;  // Extra space for '\0'
        if (size_s <= 0) {
            throw std::runtime_error("Error during formatting.");
        }
        auto size = static_cast<size_t>(size_s);
        std::unique_ptr<char[]> buf(new char[size]);
        std::snprintf(buf.get(), size, format.c_str(), args...);
        return std::string(buf.get(), buf.get() + size - 1);  // We don't want the '\0' inside
    }

    bool isFloat(string myString) {
        std::istringstream iss(myString);
        float f;
        iss >> noskipws >> f;  // noskipws considers leading whitespace invalid
        // Check the entire string was consumed and if either failbit or badbit is set
        return iss.eof() && !iss.fail();
    }

    string discountPrices(string s, int discount) {
        auto ss = split(s, " ");
        discount = 100 - discount;
        string ans = "";
        for (int i = 0; i < ss.size(); i++) {
            if (ss[i][0] == '$' && isFloat(ss[i].substr(1))) {
                double num = stod(ss[i].substr(1));
                cout << num << endl;
                num *= 1.0 * discount / 100.0;
                ans += string_format("$%.2f", num);
            } else {
                ans += ss[i];
            }

            if (i != ss.size() - 1) {
                ans += " ";
            }
        }
        return ans;
    }
};