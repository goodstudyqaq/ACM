/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

int g[505][505];

class Solution {
   public:
    int magnificentSets(int n, vector<vector<int>>& edges) {
        // n = 15;
        // edges = {{9, 15},
        //          {2, 3},
        //          {13, 11},
        //          {6, 15},
        //          {14, 9},
        //          {10, 13},
        //          {14, 2},
        //          {15, 5},
        //          {1, 2},
        //          {13, 15},
        //          {1, 12},
        //          {14, 13},
        //          {9, 6},
        //          {4, 1},
        //          {15, 2},
        //          {7, 15},
        //          {10, 3},
        //          {10, 9},
        //          {11, 8},
        //          {4, 14}};
        vector<vector<int>>
            V(n + 1);
        int m = edges.size();
        for (int i = 0; i < m; i++) {
            int u = edges[i][0], v = edges[i][1];
            V[u].push_back(v);
            V[v].push_back(u);
        }
        const int inf = numeric_limits<int>::max() / 2;

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                g[i][j] = inf;
            }
        }

        for (int i = 1; i <= n; i++) {
            g[i][i] = 0;
            for (auto v : V[i]) {
                g[i][v] = 1;
            }
        }

        for (int k = 1; k <= n; k++) {
            for (int i = 1; i <= n; i++) {
                if (g[i][k] == inf) continue;
                for (int j = 1; j <= n; j++) {
                    g[i][j] = min(g[i][j], g[i][k] + g[k][j]);
                }
            }
        }

        vector<int> color(n + 1, -1);
        vector<int> v2;

        function<bool(int u, int c)> dfs = [&](int u, int c) -> bool {
            color[u] = c;
            v2.push_back(u);
            for (auto v : V[u]) {
                if (color[v] == -1) {
                    bool tmp = dfs(v, c ^ 1);
                    if (tmp == 0) return 0;
                } else {
                    if (color[v] != (c ^ 1)) {
                        return 0;
                    }
                }
            }
            return 1;
        };

        auto work = [&](int u) {
            v2.clear();
            bool result = dfs(u, 0);
            if (result == 0) return -1;
            int n = v2.size();
            int ans = 0;
            debug(v2);
            for (int i = 0; i < n; i++) {
                for (int j = i + 1; j < n; j++) {
                    ans = max(ans, g[v2[i]][v2[j]]);
                }
            }
            return ans + 1;
        };

        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (color[i] == -1) {
                int res = work(i);
                if (res == -1) {
                    return -1;
                }
                ans += res;
                debug(i, ans);
            }
        }
        return ans;
    }
};