/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

class Solution {
   public:
    int magnificentSets(int n, vector<vector<int>>& edges) {
        vector<vector<int>> V(n + 1);
        int m = edges.size();
        for (int i = 0; i < m; i++) {
            int u = edges[i][0], v = edges[i][1];
            V[u].push_back(v);
            V[v].push_back(u);
        }
        const int inf = numeric_limits<int>::max() / 2;
        vector<vector<int>> g(n + 1, vector<int>(n + 1, inf));

        for (int i = 1; i <= n; i++) {
            g[i][i] = 0;
            for (auto v : V[i]) {
                g[i][v] = 1;
            }
        }
        vector<int> v2;
        vector<int> color(n + 1, -1);
        int maxd = 0, u1 = -1;

        function<bool(int u, int c, int d)> dfs = [&](int u, int c, int d) -> bool {
            if (d > maxd) {
                maxd = d;
                u1 = u;
            }
            color[u] = c;
            v2.push_back(u);
            for (auto v : V[u]) {
                if (color[v] == -1) {
                    dfs(v, c ^ 1, d + 1);
                } else {
                    if (color[v] != (c ^ 1)) {
                        return 0;
                    }
                }
            }
            return 1;
        };

        auto work = [&](int u) {
            v2.clear();
            maxd = 0, u1 = -1;
            bool result = dfs(u, 0, 1);
            if (result == 0) return -1;
            maxd = 0;
            int rt = u1;
            for (auto it : v2) {
                color[it] = -1;
            }
            dfs(rt, 0, 1);
            return maxd;
        };

        int ans = 0;
        for (int i = 1; i <= n; i++) {
            if (color[i] == -1) {
                int res = work(i);
                if (res == -1) {
                    return -1;
                }
                ans += res;
                debug(i, ans);
            }
        }
        return ans;
    }
};