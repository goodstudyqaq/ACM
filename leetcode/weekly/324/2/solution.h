/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

class Solution {
   public:
    bool isPossible(int n, vector<vector<int>>& edges) {
        vector<int> in(n + 1);
        int m = edges.size();
        set<pair<int, int>> S;
        for (int i = 0; i < m; i++) {
            int u = edges[i][0], v = edges[i][1];
            if (u > v) swap(u, v);
            in[u]++, in[v]++;
            S.insert({u, v});
        }

        vector<int> V;
        for (int i = 1; i <= n; i++) {
            if (in[i] % 2) {
                V.push_back(i);
            }
        }

        if (V.size() == 0) return true;

        if (V.size() == 2) {
            int u = V[0], v = V[1];
            if (u > v) swap(u, v);

            if (S.count({u, v}) == 0) return true;

            for (int i = 1; i <= n; i++) {
                if (i != u && i != v) {
                    int t1 = min(i, u), t2 = max(i, u);
                    int t3 = min(i, v), t4 = max(i, v);
                    if (S.count({t1, t2}) == 0 && S.count({t3, t4}) == 0) return true;
                }
            }
            return false;
        } else if (V.size() == 4) {
            if (S.count({V[0], V[1]}) == 0 && S.count({V[2], V[3]}) == 0) return true;
            if (S.count({V[0], V[2]}) == 0 && S.count({V[1], V[3]}) == 0) return true;
            if (S.count({V[0], V[3]}) == 0 && S.count({V[1], V[2]}) == 0) return true;
            return false;
        }
        return false;
    }
};