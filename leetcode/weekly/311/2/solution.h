/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
   public:
    TreeNode* reverseOddLevels(TreeNode* root) {
        vector<TreeNode*> V;
        V.push_back(NULL);
        function<void()> bfs = [&]() {
            queue<TreeNode*> Q;
            Q.push(root);
            while (!Q.empty()) {
                auto it = Q.front();
                Q.pop();
                V.push_back(it);
                if (it->left != NULL) {
                    Q.push(it->left);
                    Q.push(it->right);
                }
            }
        };
        bfs();
        int sz = V.size() - 1;
        debug(sz);
        for (int i = 0; (1 << i) < sz; i++) {
            if (i % 2) {
                int l = 1 << i;
                int r = (1 << (i + 1)) - 1;
                debug(l, r);
                for (int j = l; j <= (l + r) / 2; j++) {
                    debug(j, l + r - j, V[j]->val, V[l + r - j]->val);
                    swap(V[j]->val, V[l + r - j]->val);
                }
            }
        }
        return root;
    }
};