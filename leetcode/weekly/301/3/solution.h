/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

typedef pair<int, int> pii;
const int maxn = 1e4 + 1;
const int maxk = 14;
const int mod = 1e9 + 7;
static unordered_map<int, int> M[maxk][maxn];
static vector<int> V[maxn];
class Solution {
   public:
    void init() {
        if (M[0][1].size()) return;
        for (int i = 1; i < maxn; i++) {
            for (int j = 1; j * i < maxn; j++) {
                V[i * j].emplace_back(i);
            }
        }
        debug("done1");

        // for (int i = 1; i < maxn; i++) {
        //     for (int j = 0; j < V[i].size(); j++) {
        //         for (int k = j; k < V[i].size(); k++) {
        //             if (V[i][k] % V[i][j] == 0) {
        //                 V2[i].emplace_back(make_pair(V[i][k], V[i][j]));
        //             }
        //         }
        //     }
        // }
        debug("done2");
        for (int i = 1; i < maxn; i++) {
            for (auto j : V[i]) {
                M[0][i][j] = 1;
            }
        }
        for (int k = 1; k < maxk; k++) {
            for (int i = 1; i < maxn; i++) {
                for (auto p : V[i]) {
                    for (auto j : V[p]) {
                        (M[k][i][j] += 1LL * M[k - 1][i][p] * M[k - 1][p][j] % mod) %= mod;
                    }
                }
            }
        }
    }

    int idealArrays(int n, int mx) {
        // n = 9069;
        // mx = 9411;
        init();
        n--;
        vector<int> M2;
        M2.resize(mx + 1, 1);
        // debug(M[0]);
        // debug(M[1]);
        for (int i = maxk - 1; i >= 0; i--) {
            if ((n >> i) & 1) {
                for (int j = mx; j >= 1; j--) {
                    int tmp_v = 0;
                    for (auto p : V[j]) {
                        (tmp_v += 1LL * M2[p] * M[i][j][p] % mod) %= mod;
                    }
                    M2[j] = tmp_v;
                }
            }
        }
        int ans = 0;
        for (int i = 1; i <= mx; i++) {
            (ans += M2[i]) %= mod;
        }
        debug(ans);
        return ans;
    }
};