/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

class Solution {
   public:
    bool canChange(string s, string t) {
        int n = s.size();
        int m = t.size();
        auto check = [&]() {
            string ss = "", tt = "";
            for (int i = 0; i < n; i++) {
                if (s[i] != '_') {
                    ss.push_back(s[i]);
                }
            }
            for (int i = 0; i < m; i++) {
                if (t[i] != '_') {
                    tt.push_back(t[i]);
                }
            }
            return ss == tt;
        };

        if (!check()) {
            return false;
        }
        vector<int> L(n), R(n);

        char last = 'z';
        int val = -1;
        for (int i = 0; i < n; i++) {
            if (s[i] == '_') continue;

            if (s[i] == 'R') {
                L[i] = i;
                last = 'R';
                val = i;
            } else {
                if (last == 'z') {
                    L[i] = 0;
                    val = i;
                } else {
                    L[i] = L[val] + 1;
                    val = i;
                }
                last = 'L';
            }
        }
        last = 'z';
        val = -1;
        for (int i = n - 1; i >= 0; i--) {
            if (s[i] == '_') continue;
            if (s[i] == 'L') {
                R[i] = i;
                last = 'L';
                val = i;
            } else {
                if (last == 'z') {
                    R[i] = n - 1;
                    val = i;
                } else {
                    R[i] = R[val] - 1;
                    val = i;
                }
                last = 'R';
            }
        }

        vector<int> V;
        for (int i = 0; i < m; i++) {
            if (t[i] != '_') {
                V.emplace_back(i);
            }
        }
        int t_idx = 0;
        for (int i = 0; i < n; i++) {
            if (s[i] != '_') {
                int idx = V[t_idx++];
                if (L[i] <= idx && idx <= R[i]) {
                } else {
                    return false;
                }
            }
        }
        return true;
    }
};