/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

class Solution {
   public:
    int minimumScore(vector<int>& nums, vector<vector<int>>& edges) {
        int n = nums.size();
        vector<vector<int>> V(n);
        for (int i = 0; i < n - 1; i++) {
            int u = edges[i][0], v = edges[i][1];
            V[u].push_back(v);
            V[v].push_back(u);
        }
        vector<int> dp(n), L(n), R(n);
        int tnt = 0;
        function<void(int, int)> dfs = [&](int u, int pre) {
            debug(u, pre);
            L[u] = tnt++;
            dp[u] = nums[u];
            for (auto v : V[u]) {
                if (v == pre) continue;
                dfs(v, u);
                dp[u] ^= dp[v];
            }
            R[u] = tnt;
        };
        dfs(0, -1);
        debug(L, R);
        debug(dp);

        auto work = [&](int u, int v) {
            int tmp1, tmp2, tmp3;
            if (L[u] <= L[v] && L[v] < R[u]) {
                // v 被 u 包围
                tmp1 = dp[v];
                tmp2 = dp[u] ^ tmp1;
                tmp3 = dp[0] ^ dp[u];
            } else if (L[v] <= L[u] && L[u] < R[v]) {
                tmp1 = dp[u];
                tmp2 = dp[v] ^ tmp1;
                tmp3 = dp[0] ^ dp[v];
            } else {
                tmp1 = dp[u];
                tmp2 = dp[v];
                tmp3 = dp[0] ^ dp[u] ^ dp[v];
            }
            int mx = max({tmp1, tmp2, tmp3});
            int mi = min({tmp1, tmp2, tmp3});
            debug(u, v, tmp1, tmp2, tmp3);
            return mx - mi;
        };

        int ans = 1e9;
        for (int i = 1; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int res = work(i, j);
                if (res == 5) {
                    debug(i, j);
                }
                ans = min(ans, res);
            }
        }
        return ans;
    }
};