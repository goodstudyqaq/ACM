/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
   public:
    int averageOfSubtree(TreeNode *root) {
        int ans = 0;
        typedef pair<int, int> pii;
        function<pii(TreeNode *)> dfs = [&](TreeNode *u) -> pii {
            pii now = {u->val, 1};
            if (u->left != NULL) {
                pii tmp = dfs(u->left);
                now.first += tmp.first;
                now.second += tmp.second;
            }
            if (u->right != NULL) {
                pii tmp = dfs(u->right);
                now.first += tmp.first;
                now.second += tmp.second;
            }

            int val = u->val;
            if (val * now.second == now.first) {
                ans++;
            }
            debug(now, u->val);
            return now;
        };
        dfs(root);
        return ans;
    }
};