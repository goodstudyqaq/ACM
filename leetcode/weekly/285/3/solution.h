/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#define lson l, m, rt << 1
#define rson m + 1, r, rt << 1 | 1

const int maxn = 1e5 + 5;
int sum[maxn << 2];
int lsum[maxn << 2], rsum[maxn << 2];
int a[maxn];

void push_up(int rt, int l, int r) {
    int len = r - l + 1;
    int m = l + r >> 1;
    int l_len = m - l + 1;
    int r_len = len - l_len;

    sum[rt] = max(sum[rt << 1], sum[rt << 1 | 1]);
    sum[rt] = max(sum[rt], rsum[rt << 1] + lsum[rt << 1 | 1]);

    lsum[rt] = lsum[rt << 1];

    if (lsum[rt] == l_len) {
        lsum[rt] += lsum[rt << 1 | 1];
    }
    rsum[rt] = rsum[rt << 1 | 1];
    if (rsum[rt] == r_len) {
        rsum[rt] += rsum[rt << 1];
    }
}

void build(int l, int r, int rt) {
    if (l == r) {
        sum[rt] = a[l];
        lsum[rt] = a[l];
        rsum[rt] = a[l];
        return;
    }
    int m = l + r >> 1;
    build(lson);
    build(rson);
    push_up(rt, l, r);
}

void update(int L, int val, int l, int r, int rt) {
    if (l == r) {
        sum[rt] = val;
        lsum[rt] = val;
        rsum[rt] = val;
        return;
    }
    int m = l + r >> 1;
    if (L <= m) {
        update(L, val, lson);
    } else {
        update(L, val, rson);
    }
    push_up(rt, l, r);
}

int query() {
    return sum[1];
}

class Solution {
   public:
    vector<int> ans;
    vector<int> longestRepeating(string s, string queryCharacters, vector<int>& queryIndices) {
        int m = queryIndices.size();
        ans.resize(m);
        for (int i = 0; i < m; i++) {
            ans[i] = 0;
        }
        int n = s.size();
        for (int i = 0; i < 26; i++) {
            string _s = s;
            for (int j = 0; j < n; j++) {
                if (s[j] - 'a' == i) {
                    a[j] = 1;
                } else {
                    a[j] = 0;
                }
            }
            build(0, n - 1, 1);
            int now_ans = query();
            for (int j = 0; j < m; j++) {
                int idx = queryIndices[j];
                if (queryCharacters[j] - 'a' == i || _s[idx] - 'a' == i) {
                    if (queryCharacters[j] - 'a' == i) {
                        update(idx, 1, 0, n - 1, 1);
                    } else {
                        update(idx, 0, 0, n - 1, 1);
                    }
                    now_ans = query();
                }
                ans[j] = max(ans[j], now_ans);
                _s[idx] = queryCharacters[j];
            }
        }
        return ans;
    }
};