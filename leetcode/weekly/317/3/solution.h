/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

/*
https://codeforces.com/contest/1736/problem/C2
*/
template <typename T>
struct RMQ {
    int n = 0, levels = 0;
    vector<T> values;
    vector<vector<int>> range_high;
    function<bool(T, T)> func;

    RMQ(const vector<T>& _values, function<bool(T, T)> f) {
        func = f;
        if (!_values.empty())
            build(_values, f);
    }
    RMQ() {}

    static int largest_bit(int x) {
        return 31 - __builtin_clz(x);
    }

    int max_index(int a, int b) const {
        return func(values[a], values[b]) ? a : b;
        // return values[a] > values[b] ? a : b;
    }

    void build(const vector<T>& _values, function<bool(T, T)> f) {
        values = _values;
        func = f;
        n = values.size();
        levels = largest_bit(n) + 1;
        range_high.resize(levels);

        for (int k = 0; k < levels; k++)
            range_high[k].resize(n - (1 << k) + 1);

        for (int i = 0; i < n; i++)
            range_high[0][i] = i;

        for (int k = 1; k < levels; k++)
            for (int i = 0; i <= n - (1 << k); i++) {
                range_high[k][i] = max_index(range_high[k - 1][i], range_high[k - 1][i + (1 << (k - 1))]);
            }
    }
    // [a, b]
    int rmq_index(int a, int b) const {
        assert(a <= b);
        int level = largest_bit(b + 1 - a);
        return max_index(range_high[level][a], range_high[level][b + 1 - (1 << level)]);
    }

    // [a, b]
    T rmq_value(int a, int b) const {
        return values[rmq_index(a, b)];
    }

    int nxt_idx(int idx) {
        int sz = range_high.size() - 1;
        int now = idx;
        for (int i = sz; i >= 0; i--) {
            if (now + (1 << i) - 1 < n && max_index(range_high[i][now], idx) == idx) {
                now += (1 << i);
            }
        }
        return now;
    }
};

class Solution {
   public:
    vector<int> treeQueries(TreeNode* root, vector<int>& queries) {
        int n = 0;
        int cnt = 0;
        vector<int> L, R;
        vector<int> depth;
        vector<int> V;
        function<void(TreeNode*, int, bool)> dfs = [&](TreeNode* now, int dep, bool f) {
            if (!f) {
                n++;
            }
            if (f) {
                depth[now->val] = dep;
                L[now->val] = cnt;
                V[cnt++] = dep;
            }
            if (now->left != NULL) {
                dfs(now->left, dep + 1, f);
            }
            if (now->right != NULL) {
                dfs(now->right, dep + 1, f);
            }
            if (f) {
                R[now->val] = cnt;
            }
        };
        dfs(root, 0, 0);
        L.resize(n + 1);
        R.resize(n + 1);
        depth.resize(n + 1);
        V.resize(n + 1);
        dfs(root, 0, 1);

        RMQ<int> rmq(V, [&](int x, int y) {
            return x > y;
        });

        vector<int> res(queries.size());
        for (int i = 0; i < queries.size(); i++) {
            int u = queries[i];
            int left = L[u], right = R[u];
            // [left, right)

            int ans = 0;
            if (left > 0) {
                ans = max(ans, rmq.rmq_value(0, left - 1));
            }
            if (right <= n - 1) {
                ans = max(ans, rmq.rmq_value(right, n - 1));
            }
            res[i] = ans;
        }
        return res;
    }
};