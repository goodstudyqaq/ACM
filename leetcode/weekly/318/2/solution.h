/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

class Solution {
   public:
    long long totalCost(vector<int>& V, int k, int c) {
        int n = V.size();

        if (c >= (n + 1) / 2) {
            sort(V.begin(), V.end());

            long long res = 0;
            for (int i = 0; i < k; i++) {
                res += V[i];
            }
            return res;
        }
        map<int, int> M1, M2;
        for (int i = 0; i < c; i++) {
            M1[V[i]]++;
        }
        for (int i = n - 1; i >= n - c; i--) {
            M2[V[i]]++;
        }
        int l = c, r = n - c - 1;
        int num = 0;
        long long ans = 0;
        while (num < k) {
            if (M1.size() == 0) {
                auto it = *M2.begin();
                ans += it.first;
                M2[it.first]--;
                if (M2[it.first] == 0) {
                    M2.erase(it.first);
                }
            } else if (M2.size() == 0) {
                auto it = *M1.begin();
                ans += it.first;
                M1[it.first]--;
                if (M1[it.first] == 0) {
                    M1.erase(it.first);
                }
            } else {
                auto it1 = *M1.begin();
                auto it2 = *M2.begin();
                if (it1.first <= it2.first) {
                    ans += it1.first;
                    M1[it1.first]--;
                    if (M1[it1.first] == 0) {
                        M1.erase(it1.first);
                    }
                    if (l <= r) {
                        M1[V[l]]++;
                        l++;
                    }
                } else {
                    ans += it2.first;
                    M2[it2.first]--;
                    if (M2[it2.first] == 0) {
                        M2.erase(it2.first);
                    }
                    if (l <= r) {
                        M2[V[r]]++;
                        r--;
                    }
                }
            }
            num++;
        }

        return ans;
    }
};