{
    "class_name": "Solution",
    "default_code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    int amountOfTime(TreeNode* root, int start) {\n        \n    }\n};",
    "functions": [
        {
            "input_params": [
                "TreeNode* root",
                "int start"
            ],
            "is_constructor": false,
            "location": 13,
            "name": "amountOfTime",
            "output_params": "int"
        }
    ],
    "id": "2",
    "is_func_problem": true,
    "language": "cpp",
    "openURL": true,
    "sample_ins": [
        [
            "[1,5,3,null,4,10,6,9,2]",
            "3"
        ],
        [
            "[1]",
            "1"
        ]
    ],
    "sample_outs": [
        [
            "4"
        ],
        [
            "0"
        ]
    ],
    "url": "https://leetcode.cn/contest/weekly-contest-307/problems/amount-of-time-for-binary-tree-to-be-infected/"
}