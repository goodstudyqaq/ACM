/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
const int maxn = 1e5 + 1;
class Solution {
   public:
    int amountOfTime(TreeNode* root, int start) {
        vector<vector<int>> V(maxn);
        function<void(TreeNode * now)> dfs = [&](TreeNode* now) {
            if (now->left != NULL) {
                V[now->val].push_back(now->left->val);
                V[now->left->val].push_back(now->val);
                dfs(now->left);
            }
            if (now->right != NULL) {
                V[now->val].push_back(now->right->val);
                V[now->right->val].push_back(now->val);
                dfs(now->right);
            }
        };
        dfs(root);

        int mx_d = 0;
        int choose_u = -1;
        function<void(int u, int pre, int d)> dfs2 = [&](int u, int pre, int d) {
            if (mx_d < d) {
                mx_d = d;
                choose_u = u;
            }
            for (auto v : V[u]) {
                if (v == pre) continue;
                dfs2(v, u, d + 1);
            }
        };
        dfs2(start, -1, 0);
        return mx_d;
    }
};