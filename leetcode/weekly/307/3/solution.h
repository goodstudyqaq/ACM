/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

#ifdef LOCAL
#define debug(...) cerr << "[" << #__VA_ARGS__ << "]:", debug_out(__VA_ARGS__)
#else
#define debug(...) 42
#endif

class Solution {
   public:
    long long kSum(vector<int>& nums, int k) {
        // nums = {1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009};
        // k = 10;
        long long res = 0;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        for (int i = n - 1; i >= 0; i--) {
            if (nums[i] > 0) {
                res += nums[i];
            }
        }
        debug(res);
        sort(nums.begin(), nums.end(), [&](int a, int b) {
            return abs(a) < abs(b);
        });
        for (int i = 0; i < n; i++) {
            if (nums[i] > 0) nums[i] = -nums[i];
        }
        typedef pair<long long, int> pii;
        priority_queue<pii> Q;
        Q.push({res, -1});

        for (int i = 0; i < k; i++) {
            auto it = Q.top();
            debug(it);
            Q.pop();
            if (i == k - 1) {
                return it.first;
            }
            if (it.second + 1 < n) {
                Q.push({it.first + nums[it.second + 1], it.second + 1});
                if (it.second != -1) {
                    Q.push({it.first + nums[it.second + 1] - nums[it.second], it.second + 1});
                }
            }
        }
        return 0;
    }
};