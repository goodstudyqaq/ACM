/*
Code generated by https://github.com/goodStudyTnT/leetcode-tester
*/

#if __has_include("../../utils/cpp/help.h")
#include "../../utils/cpp/help.h"
#endif

typedef pair<int, int> pp;
class Solution {
   public:
    vector<vector<pp>> V;
    int maximumScore(vector<int>& scores, vector<vector<int>>& edges) {
        int n = scores.size();
        V.resize(n);
        for (int i = 0; i < n; i++) {
            V[i].clear();
        }
        int m = edges.size();
        for (int i = 0; i < m; i++) {
            int u = edges[i][0], v = edges[i][1];
            V[u].push_back({scores[v], v});
            V[v].push_back({scores[u], u});
        }

        for (int i = 0; i < n; i++) {
            sort(V[i].begin(), V[i].end());
        }

        int ans = -1;

        for (int i = 0; i < m; i++) {
            int u = edges[i][0], v = edges[i][1];
            if (V[u].size() >= 2 && V[v].size() >= 2) {
                int u_sz = V[u].size();
                int v_sz = V[v].size();
                int a = min(3, u_sz);
                int b = min(3, v_sz);
                for (int k = u_sz - 1; k >= u_sz - a; k--) {
                    for (int j = v_sz - 1; j >= v_sz - b; j--) {
                        int p = V[u][k].second, q = V[v][j].second;
                        if (p != v && p != q && q != u) {
                            ans = max(ans, scores[u] + scores[v] + scores[p] + scores[q]);
                        }
                    }
                }
            }
        }
        return ans;
    }
};